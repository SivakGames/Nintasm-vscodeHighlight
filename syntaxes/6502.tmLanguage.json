{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"foldingStartMarker": "^[^\\\t ]+$",
	"foldingStopMarker": "^!(  |\\\t)$",
	"name": "6502 assembly (Nintasm)",
	"fileTypes": [
		"*.6502",
		"*.nintasm",
		"*.asm"
	],
	"patterns": [
		{ "include": "#Main-Comments" },
		{ "include": "#Main-LabelLine" },
		{ "include": "#Main-PreLine" }
	],
	"repository": {
		"Main-Comments": {
			"name": "comment.line",
			"match": "(;).*$",
			"captures": { "1": { "name": "punctuation.definition.comment" }	}
		},
		"Main-LabelLine": {
			"match": "^(\\S+[^;]+)",
			"captures": {
				"1": {
					"patterns": [
						{ "include": "#Main-Constants" },
						{ "include": "#Main-LabeledOpsSingle" },
						{ "include": "#Main-LabeledOpsMulti" },
						{ "include": "#Main-Labels" }
					]
				}
			}
		},
		"Main-PreLine": {
			"match": "^(\\s)+([^;]+)",
			"captures": {
				"1": {
					"name": "meta.indent"
				},
				"2": {
					"patterns": [
						{ "include": "#DirectiveStart" },
						{ "include": "#Instructions" },
						{ "include": "#InstructionsNavi" },
						{ "include": "#AssemblerMacros" },
						{ "include": "#MiscUnknownOperation" },
						{ "include": "#numbers" },
						{ "include": "#operators" },
						{ "include": "#strings" },
						{ "include": "#template-strings" }
					]
				}
			}
		},
		"Main-Constants": {
			"patterns": [
				{
					"comment": "Constant label",
					"match": "^(?i)(?:([A-Za-z_]\\w*)|(\\.[A-Za-z_]\\w*))(\\s*=\\s*|\\s+equ\\s+)(\\S.*)",
					"captures": {
						"1": {
							"name": "markup.heading"
						},
						"2": {
							"name": "constant.numeric"
						},
						"3": {
							"name": "constant.character.escape"
						},
						"4": {
							"patterns": [
								{ "include": "#numbers" },
								{ "include": "#operators" },
								{ "include": "#strings" },
								{ "include": "#template-strings" },
								{ "include": "#functions" },
								{ "include": "#assembler-constants" }
							]
						}
					}
				}
			]
		},
		"Main-LabeledOpsSingle": {
			"patterns": [
				{
					"comment": "User-labeled op (same line)",
					"match": "^(?i)([A-Za-z_]\\w*)\\s+(\\.)(\\w+)\\s+(\\S.*)",
					"captures": {
						"1": { "name": "markup.heading" },
						"2": { "name": "constant.character.escape" },
						"3": {
							"patterns": [
								{ "include": "#labeled-directives-single" },
								{ "include": "#labeled-directives-multi-with-operands" }
							]
						},
						"4": {
							"patterns": [
								{ "include": "#numbers" },
								{ "include": "#operators" },
								{ "include": "#strings" },
								{ "include": "#template-strings" },
								{ "include": "#functions" },
								{ "include": "#assembler-constants" }
							]
						}
					}
				}
			]
		},
		"Main-LabeledOpsMulti": {
			"patterns": [
				{
					"comment": "User-labeled op (multi line)",
					"match": "^(?i)([A-Za-z_]\\w*)\\s+(\\.)(\\w+)",
					"captures": {
						"1": { "name": "markup.heading" },
						"2": { "name": "constant.character.escape" },
						"3": {
							"patterns": [
								{ "include": "#labeled-directives-multi" }
							]
						}
					}
				}
			]
		},
		"Main-Labels": {
			"patterns": [
				{
					"comment": "General Labels",
					"match": "^([A-Za-z_]\\w*)(:)",
					"captures": {
						"1": { "name": "markup.heading" },
						"2": { "name": "constant.character.escape" }
					}
				},
				{
					"comment": "Local Labels",
					"match": "^(\\.[A-Za-z_]\\w*)(:)",
					"captures": {
						"1": { "name": "support.class" },
						"2": { "name": "constant.character.escape" }
					}
				},
				{
					"comment": "Template Label",
					"match": "^(.+)(:)",
					"captures": {
						"1": {
							"patterns": [
								{"include": "#template-labels"}
							]
						},
						"2": {
							"name": "constant.character.escape"
						}
					}
				}
			]
		},

		"DirectiveStart": {
			"match": "(\\.)(.+)",
			"captures": {
				"1": { "name": "constant.character.escape" },
				"2": {
					"patterns": [
						{ "include": "#Directives" },
						{ "include": "#numbers" },
						{ "include": "#strings" },
						{ "include": "#template-strings" },
						{ "include": "#operators" },
						{ "include": "#assembler-constants" }
					]
				}
			}
		},

		"Directives": {
			"patterns": [
				{
					"comment": "Directives (iNES)",
					"match": "(?i)(inesprg|ineschr|inesmap|inesmir|inesbat)\\s+(\\S.*)",
					"captures": {
						"1": { "name": "storage" },
						"2": {
							"patterns": [
								{ "include": "#numbers" },
								{ "include": "#strings" },
								{ "include": "#template-strings" },
								{ "include": "#operators" },
								{ "include": "#assembler-constants" }
							]
						}
					}
				},
				{
					"comment": "Directives (ROM layout)",
					"match": "(?i)(romsegment|bank|org|rsset)\\b\\s+(\\S.*)",
					"captures": {
						"1": { "name": "storage" },
						"2": {
							"patterns": [
								{ "include": "#numbers" },
								{ "include": "#strings" },
								{ "include": "#template-strings" },
								{ "include": "#operators" },
								{ "include": "#assembler-constants" }
							]
						}
					}
				},
				{
					"comment": "Directives (bytes)",
					"match": "(?i)(db|byte|rdb|reversebyte|ds|pad)\\s+(\\S.*)",
					"captures": {
						"1": { "name": "storage" },
						"2": {
							"patterns": [
								{ "include": "#numbers" },
								{ "include": "#strings" },
								{ "include": "#template-strings" },
								{ "include": "#operators" },
								{ "include": "#functions" },
								{ "include": "#assembler-constants" }
							]
						}
					}
				},
				{
					"comment": "Directives (words)",
					"match": "(?i)(dw|word|dwbe|wordbigendian)\\s+(\\S.*)",
					"captures": {
						"1": { "name": "storage" },
						"2": {
							"patterns": [
								{ "include": "#numbers" },
								{ "include": "#operators" },
								{ "include": "#functions" },
								{ "include": "#template-labels" },
								{ "include": "#assembler-constants" },
								{ "include": "#local-label-operands" },
								{ "include": "#label-operands" }
							]
						}
					}
				},
				{
					"comment": "Mixed Byte Directives",
					"match": "(?i)(d_[bwe]+_?)\\s+([^:]*)",
					"captures": {
						"1": { "name": "storage" },
						"2": {
							"patterns": [
								{ "include": "#numbers" },
								{ "include": "#strings" },
								{ "include": "#template-strings" },
								{ "include": "#operators" },
								{ "include": "#functions" },
								{ "include": "#template-labels" },
								{ "include": "#assembler-constants" },
								{ "include": "#local-label-operands" },
								{ "include": "#label-operands" }
							]
						}
					}
				},
				{
					"comment": "Directives (multiline)",
					"match": "(?i)(mo|multiOp)\\s+([^:]*)(\\S.*)",
					"captures": {
						"1": {
							"name": "storage"
						},
						"2": {
							"patterns": [
								{ "include": "#DirectiveStart" },
								{ "include": "#Instructions" },
								{ "include": "#InstructionsNavi" }
							]
						},
						"3": {
							"patterns": [
								{ "include": "#MultilineFollowupOperation" }
							]
						}
					}
				},
				{
					"comment": "Directives (files)",
					"match": "(?i)(incbin|include)\\s+(\\S.*)",
					"captures": {
						"1": { "name": "storage" },
						"2": {
							"patterns": [
								{ "include": "#strings" },
								{ "include": "#template-strings" },
								{ "include": "#assembler-constants" },
								{ "include": "#numbers" }
							]
						}
					}
				},
				{
					"comment": "Directives (Misc)",
					"match": "(?i)(autozp|autozeropage|ikv|kv|range|repeat|defchar|defcharrange|defexpr|setcharmap|setexprmap|if|elseif|switch|case|reassign|log|throw|deleteMacro)\\s+(\\S.*)",
					"captures": {
						"1": { "name": "storage" },
						"2": {
							"patterns": [
								{ "include": "#numbers" },
								{ "include": "#strings" },
								{ "include": "#template-strings" },
								{ "include": "#operators" },
								{ "include": "#functions" },
								{ "include": "#assembler-constants" }
							]
						}
					}
				},
				{
					"comment": "Directives (No operands)",
					"match": "(?i)(endikv|endrange|endrepeat|else|endif|default|endswitch|resetcharmap|resetexprmap|exitMacro)",
					"captures": {
						"1": { "name": "storage" }
					}
				}
			]
		},
		"Instructions": {
			"patterns": [
				{
					"comment": "Basic instructions (implied)",
					"name": "entity.name.section",
					"match": "(?i)\\b(clc|cld|cli|clv|dex|dey|inx|iny|nop|pha|php|pla|plp|sec|sed|sei|tax|txa|tay|tya|tsx|txs)\\b"
				},
				{
					"comment": "Basic instructions (no immediate)",
					"match": "(?i)\\b(bit|dec|inc|sta|stx|sty)\\b\\s+(\\S.*)",
					"captures": {
						"1": {
							"name": "entity.name.section"
						},
						"2": {
							"patterns": [
								{ "include": "#numbers" },
								{ "include": "#operators" },
								{ "include": "#indexes" },
								{ "include": "#functions" },
								{ "include": "#assembler-constants" },
								{ "include": "#assembler-constants" }
							]
						}
					}
				},
				{
					"comment": "Basic instructions (can use immediate)",
					"match": "(?i)\\b(adc|and|cmp|cpx|cpy|eor|lda|ldx|ldy|ora|sbc)\\b\\s+(#)?(\\S.*)",
					"captures": {
						"1": {
							"name": "entity.name.section"
						},
						"2": {
							"name": "constant.character.escape"
						},
						"3": {
							"patterns": [
								{ "include": "#numbers" },
								{ "include": "#operators" },
								{ "include": "#strings" },
								{ "include": "#template-strings" },
								{ "include": "#indexes" },
								{ "include": "#functions" },
								{ "include": "#template-labels" },
								{ "include": "#assembler-constants" }
							]
						}
					}
				},
				{
					"comment": "Basic instructions (shifts)",
					"match": "(?i)\\b(asl|lsr|rol|ror)\\b\\s+(?:\\b(a)\\b|(.*))",
					"captures": {
						"1": {
							"name": "entity.name.section"
						},
						"2": {
							"name": "storage"
						},
						"3": {
							"patterns": [
								{ "include": "#numbers" },
								{ "include": "#operators" },
								{ "include": "#indexes" },
								{ "include": "#functions" },
								{ "include": "#assembler-constants" }
							]
						}
					}
				}
			]
		},
		"InstructionsNavi": {
			"patterns": [
				{
					"comment": "Navigational commands (implied)",
					"match": "(?i)\\b(brk|rti|rts)\\b",
					"captures": {
						"1": {
							"name": "support.type"
						}
					}
				},
				{
					"comment": "Navigational commands (jumps)",
					"match": "(?i)\\b(jmp|jsr)\\b\\s+(\\S.*)",
					"captures": {
						"1": {
							"name": "support.type"
						},
						"2": {
							"patterns": [
								{ "include": "#numbers" },
								{ "include": "#operators" },
								{ "include": "#indexes" },
								{ "include": "#functions" },
								{ "include": "#template-labels" },
								{ "include": "#assembler-constants" },
								{ "include": "#local-label-operands" },
								{ "include": "#label-operands" }
							]
						}
					}
				},
				{
					"comment": "Navigational commands (branches)",
					"match": "(?i)\\b(bcc|bcs|beq|bmi|bne|bpl|bvc|bvs)\\b\\s+(#)?(\\S.*)",
					"captures": {
						"1": { "name": "support.type" },
						"2": { "name": "constant.character.escape" },
						"3": {
							"patterns": [
								{ "include": "#numbers" },
								{ "include": "#operators" },
								{ "include": "#indexes" },
								{ "include": "#functions" },
								{ "include": "#template-labels" },
								{ "include": "#assembler-constants" },
								{ "include": "#local-label-operands" },
								{ "include": "#label-operands" }
							]
						}
					}
					
				}
			]
		},
		"AssemblerMacros": {
			"patterns": [
				{
					"comment": "Assembler pre-defined macro names",
					"match": "\\b(__)(resetCode|setPPU|vectors|backupAXY|restoreAXY)(__)(?:\\s+(\\S.*))?",
					"captures": {
						"1": {
							"name": "entity.name.class"
						},
						"2": {
							"name": "storage"
						},
						"3": {
							"name": "entity.name.class"
						},
						"4": {
							"patterns": [
								{ "include": "#numbers" },
								{ "include": "#operators" },
								{ "include": "#indexes" },
								{ "include": "#functions" },
								{ "include": "#assembler-constants" },
								{ "include": "#strings" },
								{ "include": "#template-strings" }
							]
						}
					}
				}
			]
		},
		"MultilineFollowupOperation": {
			"match": "(::)([^:]+)(\\S.*)?",
			"captures": {
				"1": {
					"name": "constant.character.escape"
				},
				"2": {
					"patterns": [
						{ "include": "#DirectiveStart" },
						{ "include": "#Instructions" },
						{ "include": "#InstructionsNavi" }
					]
				},
				"3": {
					"patterns": [
						{"include": "#MultilineFollowupOperation"}
					]
				}
			}
		},
		"MiscUnknownOperation": {
			"patterns": [
				{
					"comment": "Generally things like operands after macro names",
					"match": "(?:\\w+)\\s+(\\S.*)",
					"captures": {
						"1": {
								"patterns": [
								{ "include": "#numbers" },
								{ "include": "#operators" },
								{ "include": "#indexes" },
								{ "include": "#functions" },
								{ "include": "#assembler-constants" },
								{ "include": "#strings" },
								{ "include": "#template-strings" }
							]
						}
					}
				}
			]
		},

		"strings": {
			"patterns": [
				{
					"name": "string.quoted",
					"match": "\".*?\""
				},
				{
					"name": "string.quoted",
					"match": "'.*?'"
				},
				{
					"name": "support.type",
					"match": "`.*?`"
				}
			]
		},

		"template-strings": {
			"patterns": [
				{
					"name": "string.quoted",
					"match": "(s\")(.*?)(\")",
					"captures": {
						"1": {
							"name": "string.quoted"
						},
						"2": {
							"patterns": [
								{
									"name": "entity.name.class",
									"match": "{.*?}"
								}
							]
						},
						"3": {
							"name": "string.quoted"
						}
					}
				}
			]
		},

		"template-labels": {
			"patterns": [
				{
					"name": "support.type",
					"match": "(l\")(.*?)(\")",
					"captures": {
						"1": {
							"name": "string.quoted"
						},
						"2": {
							"patterns": [
								{	
									"name": "entity.name.class",
									"match": "{.*?}"
								}
							]
						},
						"3": {
							"name": "string.quoted"
						}
					}
				}
			]
		},

		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.binary",
					"match": "%[01]+\\b"
				},
				{
					"name": "constant.numeric.hexadecimal",
					"match": "\\$[0-9A-Fa-f]+\\b"
				},
				{
					"name": "constant.numeric.decimal",
					"match": "[0-9]+\\b"
				}
			]
		},
		"operators": {
			"match": "(\\+|-|\\*|/|%|\\&|\\||\\^|~|<|>|=|\\?|\\\\)",
			"captures": {
				"1": { "name": "constant.character.escape" }
			}
		},
		"indexes": {
			"match": "(?i)(,)\\s*\\b(x|y)\\b",
			"captures": {
				"1": { "name": "constant.character.escape" },
				"2": { "name": "storage" }
			}
		},

		"labeled-directives-single": {
			"match": "(?i)\\b(func|gnsi|rs)\\b",
			"captures": {
				"1": { "name": "storage" }
			}
		},

		"labeled-directives-multi-with-operands": {
			"match": "(?i)\\b(macro)\\b",
			"captures": {
				"1": { "name": "storage" }
			}
		},
		
		
		"labeled-directives-multi": {
			"match": "(?i)\\b(charmap|endm|namespace|endnamespace|exprmap|endcharmap|endexprmap)\\b",
			"captures": {
				"1": { "name": "storage" }
			}
		},

		"assembler-constants": {
			"patterns": [
				{
					"match": "\\b(CTRLBTN)\\.(a|b|select|start|up|down|left|right)\\b",
					"captures": {
						"1": {
							"name": "string"
						},
						"2": {
							"name": "entity.name.class"
						}
					},
					"complete": [
						{
							"label": "a",
							"kind": "property"
						}
					]
				},
				{
					"match": "\\b(PPUCTRL)(?:\\.(nameTable0|nameTable1|nameTable2|nameTable3|drawDirection|spritePatternTable|bgPatternTable|use8x16Sprites|masterSlave|enableNMI))?\\b",
					"captures": {
						"1": {
							"name": "string"
						},
						"2": {
							"name": "entity.name.class"
						}
					}
				},
				{
					"match": "\\b(PPUMASK)(?:\\.(grayscale|disableBgClip|disableSpriteClip|showBg|showSprites|emphasizeRed|emphasizeGreen|emphasizeBlue))?\\b",
					"captures": {
						"1": {
							"name": "string"
						},
						"2": {
							"name": "entity.name.class"
						}
					}
				},
				{
					"match": "\\b(PPUADDR)(?:\\.(nt[0-3]line[0-9]{1,2}|nt[0-3]attLine[0-7]|palBg[0-3]|palSprite[0-3]))?\\b",
					"captures": {
						"1": {
							"name": "string"
						},
						"2": {
							"name": "entity.name.class"
						}
					}
				},
				{
					"match": "\\b(OAMATTR)(?:\\.(pal[0-3]|priority|flipHoriz|flipVert))?\\b",
					"captures": {
						"1": {
							"name": "string"
						},
						"2": {
							"name": "entity.name.class"
						}
					}
				},
				{
					"match": "\\b(PPUSTATUS|PPUSCROLL|PPUDATA)\\b",
					"captures": {
						"1": {
							"name": "string"
						}
					}
				}
			]
			
		},

		"functions": {
			"match": "\\b(low|high|bank|defined|strLen|reverseStr|subStr|arrayLen|subArray|arrayByteLen|arrayContains|arrayIndex|bytesInCurrentLocal|bytesInLocal|bytesInCurrentLabel|bytesInLabel|namespaceValuesToArray|toCharmap|round|floor|ceil|modfInt|modfDeci|sin|cos|tan|sindeg|cosdeg|tandeg|sqrt)\\b",
			"captures": {
				"1": { "name": "support.type" }
			}
		},

		"local-label-operands": {
			"match": "(\\.(?:[A-Za-z_]\\w*)\\b)",
			"captures": {
				"1": { "name": "entity.name.class" }
			}
		},

		"label-operands": {
			"match": "([A-Za-z_]\\w*)",
			"captures": {
				"1": { "name": "markup.heading" }
			}
		}
	},
	
	"scopeName": "source.6502"
}
